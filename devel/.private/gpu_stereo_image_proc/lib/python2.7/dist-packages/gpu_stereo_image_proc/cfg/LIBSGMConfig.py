## *********************************************************
##
## File autogenerated for the gpu_stereo_image_proc package
## by the dynamic_reconfigure package.
## Please do not edit.
##
## ********************************************************/

from dynamic_reconfigure.encoding import extract_params

inf = float('inf')

config_description = {'upper': 'DEFAULT', 'lower': 'groups', 'srcline': 246, 'name': 'Default', 'parent': 0, 'srcfile': '/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'cstate': 'true', 'parentname': 'Default', 'class': 'DEFAULT', 'field': 'default', 'state': True, 'parentclass': '', 'groups': [], 'parameters': [{'srcline': 291, 'description': 'Disparity to begin search at, pixels (may be negative)', 'max': 2048, 'cconsttype': 'const int', 'ctype': 'int', 'srcfile': '/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'name': 'min_disparity', 'edit_method': '', 'default': 0, 'level': 0, 'min': -2048, 'type': 'int'}, {'srcline': 291, 'description': 'Number of disparities to search, pixels', 'max': 256, 'cconsttype': 'const int', 'ctype': 'int', 'srcfile': '/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'name': 'disparity_range', 'edit_method': "{'enum_description': 'Selectable options for max disparty', 'enum': [{'srcline': 13, 'description': '64', 'srcfile': '/home/jetson/Self-Driving-Delivery-Robot/src/utils/gpu_stereo_image_proc/cfg/LIBSGM.cfg', 'cconsttype': 'const int', 'value': 64, 'ctype': 'int', 'type': 'int', 'name': '64'}, {'srcline': 14, 'description': '128', 'srcfile': '/home/jetson/Self-Driving-Delivery-Robot/src/utils/gpu_stereo_image_proc/cfg/LIBSGM.cfg', 'cconsttype': 'const int', 'value': 128, 'ctype': 'int', 'type': 'int', 'name': '128'}, {'srcline': 15, 'description': '256', 'srcfile': '/home/jetson/Self-Driving-Delivery-Robot/src/utils/gpu_stereo_image_proc/cfg/LIBSGM.cfg', 'cconsttype': 'const int', 'value': 256, 'ctype': 'int', 'type': 'int', 'name': '256'}]}", 'default': 128, 'level': 0, 'min': 64, 'type': 'int'}, {'srcline': 291, 'description': 'Filter out if best match does not sufficiently exceed the next-best match', 'max': 100.0, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'name': 'uniqueness_ratio', 'edit_method': '', 'default': 15.0, 'level': 0, 'min': 0.0, 'type': 'double'}, {'srcline': 291, 'description': 'Scan line directions used during cost aggregation step', 'max': 1, 'cconsttype': 'const int', 'ctype': 'int', 'srcfile': '/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'name': 'path_type', 'edit_method': "{'enum_description': 'Scan line directions used during cost aggregation step', 'enum': [{'srcline': 24, 'description': 'Aggregate cost from four directions forming a cross', 'srcfile': '/home/jetson/Self-Driving-Delivery-Robot/src/utils/gpu_stereo_image_proc/cfg/LIBSGM.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'SCAN_4PATH'}, {'srcline': 25, 'description': 'Aggregate cost over all scan lines', 'srcfile': '/home/jetson/Self-Driving-Delivery-Robot/src/utils/gpu_stereo_image_proc/cfg/LIBSGM.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'SCAN_8PATH'}]}", 'default': 1, 'level': 0, 'min': 0, 'type': 'int'}, {'srcline': 291, 'description': 'Smoothness penalty', 'max': 256.0, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'name': 'P1', 'edit_method': '', 'default': 10.0, 'level': 0, 'min': 0.0, 'type': 'double'}, {'srcline': 291, 'description': 'Discontiguous pennalty', 'max': 256.0, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'name': 'P2', 'edit_method': '', 'default': 120.0, 'level': 0, 'min': 0.0, 'type': 'double'}], 'type': '', 'id': 0}

min = {}
max = {}
defaults = {}
level = {}
type = {}
all_level = 0

#def extract_params(config):
#    params = []
#    params.extend(config['parameters'])
#    for group in config['groups']:
#        params.extend(extract_params(group))
#    return params

for param in extract_params(config_description):
    min[param['name']] = param['min']
    max[param['name']] = param['max']
    defaults[param['name']] = param['default']
    level[param['name']] = param['level']
    type[param['name']] = param['type']
    all_level = all_level | param['level']

LIBSGM_64 = 64
LIBSGM_128 = 128
LIBSGM_256 = 256
LIBSGM_SCAN_4PATH = 0
LIBSGM_SCAN_8PATH = 1
