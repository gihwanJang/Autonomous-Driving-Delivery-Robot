//#line 2 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the gpu_stereo_image_proc package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __gpu_stereo_image_proc__VXSGBMCONFIG_H__
#define __gpu_stereo_image_proc__VXSGBMCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace gpu_stereo_image_proc
{
  class VXSGBMConfigStatics;

  class VXSGBMConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(VXSGBMConfig &config, const VXSGBMConfig &max, const VXSGBMConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const VXSGBMConfig &config1, const VXSGBMConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, VXSGBMConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const VXSGBMConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, VXSGBMConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const VXSGBMConfig &config) const = 0;
      virtual void getValue(const VXSGBMConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T VXSGBMConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T VXSGBMConfig::* field;

      virtual void clamp(VXSGBMConfig &config, const VXSGBMConfig &max, const VXSGBMConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const VXSGBMConfig &config1, const VXSGBMConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, VXSGBMConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const VXSGBMConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, VXSGBMConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const VXSGBMConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const VXSGBMConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, VXSGBMConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, VXSGBMConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<VXSGBMConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(VXSGBMConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("shrink_scale"==(*_i)->name){shrink_scale = boost::any_cast<int>(val);}
        if("correlation_window_size"==(*_i)->name){correlation_window_size = boost::any_cast<int>(val);}
        if("bt_clip_value"==(*_i)->name){bt_clip_value = boost::any_cast<int>(val);}
        if("ct_win_size"==(*_i)->name){ct_win_size = boost::any_cast<int>(val);}
        if("hc_win_size"==(*_i)->name){hc_win_size = boost::any_cast<int>(val);}
        if("min_disparity"==(*_i)->name){min_disparity = boost::any_cast<int>(val);}
        if("max_disparity"==(*_i)->name){max_disparity = boost::any_cast<int>(val);}
        if("SCANLINE_LEFT_RIGHT"==(*_i)->name){SCANLINE_LEFT_RIGHT = boost::any_cast<bool>(val);}
        if("SCANLINE_TOP_LEFT_BOTTOM_RIGHT"==(*_i)->name){SCANLINE_TOP_LEFT_BOTTOM_RIGHT = boost::any_cast<bool>(val);}
        if("SCANLINE_TOP_BOTTOM"==(*_i)->name){SCANLINE_TOP_BOTTOM = boost::any_cast<bool>(val);}
        if("SCANLINE_TOP_RIGHT_BOTTOM_LEFT"==(*_i)->name){SCANLINE_TOP_RIGHT_BOTTOM_LEFT = boost::any_cast<bool>(val);}
        if("SCANLINE_RIGHT_LEFT"==(*_i)->name){SCANLINE_RIGHT_LEFT = boost::any_cast<bool>(val);}
        if("SCANLINE_BOTTOM_RIGHT_TOP_LEFT"==(*_i)->name){SCANLINE_BOTTOM_RIGHT_TOP_LEFT = boost::any_cast<bool>(val);}
        if("SCANLINE_BOTTOM_TOP"==(*_i)->name){SCANLINE_BOTTOM_TOP = boost::any_cast<bool>(val);}
        if("SCANLINE_BOTTOM_LEFT_TOP_RIGHT"==(*_i)->name){SCANLINE_BOTTOM_LEFT_TOP_RIGHT = boost::any_cast<bool>(val);}
        if("path_type"==(*_i)->name){path_type = boost::any_cast<int>(val);}
        if("FILTER_TOP_AREA"==(*_i)->name){FILTER_TOP_AREA = boost::any_cast<bool>(val);}
        if("PYRAMIDAL_STEREO"==(*_i)->name){PYRAMIDAL_STEREO = boost::any_cast<bool>(val);}
        if("uniqueness_ratio"==(*_i)->name){uniqueness_ratio = boost::any_cast<double>(val);}
        if("P1"==(*_i)->name){P1 = boost::any_cast<double>(val);}
        if("P2"==(*_i)->name){P2 = boost::any_cast<double>(val);}
        if("disp12MaxDiff"==(*_i)->name){disp12MaxDiff = boost::any_cast<int>(val);}
      }
    }

    int shrink_scale;
int correlation_window_size;
int bt_clip_value;
int ct_win_size;
int hc_win_size;
int min_disparity;
int max_disparity;
bool SCANLINE_LEFT_RIGHT;
bool SCANLINE_TOP_LEFT_BOTTOM_RIGHT;
bool SCANLINE_TOP_BOTTOM;
bool SCANLINE_TOP_RIGHT_BOTTOM_LEFT;
bool SCANLINE_RIGHT_LEFT;
bool SCANLINE_BOTTOM_RIGHT_TOP_LEFT;
bool SCANLINE_BOTTOM_TOP;
bool SCANLINE_BOTTOM_LEFT_TOP_RIGHT;
int path_type;
bool FILTER_TOP_AREA;
bool PYRAMIDAL_STEREO;
double uniqueness_ratio;
double P1;
double P2;
int disp12MaxDiff;

    bool state;
    std::string name;

    
}groups;



//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int shrink_scale;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int correlation_window_size;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int bt_clip_value;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int ct_win_size;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int hc_win_size;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int min_disparity;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int max_disparity;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool SCANLINE_LEFT_RIGHT;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool SCANLINE_TOP_LEFT_BOTTOM_RIGHT;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool SCANLINE_TOP_BOTTOM;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool SCANLINE_TOP_RIGHT_BOTTOM_LEFT;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool SCANLINE_RIGHT_LEFT;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool SCANLINE_BOTTOM_RIGHT_TOP_LEFT;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool SCANLINE_BOTTOM_TOP;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool SCANLINE_BOTTOM_LEFT_TOP_RIGHT;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int path_type;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool FILTER_TOP_AREA;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool PYRAMIDAL_STEREO;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double uniqueness_ratio;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double P1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double P2;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int disp12MaxDiff;
//#line 228 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("VXSGBMConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const VXSGBMConfig &__max__ = __getMax__();
      const VXSGBMConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const VXSGBMConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const VXSGBMConfig &__getDefault__();
    static const VXSGBMConfig &__getMax__();
    static const VXSGBMConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const VXSGBMConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void VXSGBMConfig::ParamDescription<std::string>::clamp(VXSGBMConfig &config, const VXSGBMConfig &max, const VXSGBMConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class VXSGBMConfigStatics
  {
    friend class VXSGBMConfig;

    VXSGBMConfigStatics()
    {
VXSGBMConfig::GroupDescription<VXSGBMConfig::DEFAULT, VXSGBMConfig> Default("Default", "", 0, 0, true, &VXSGBMConfig::groups);
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.shrink_scale = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.shrink_scale = 64;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.shrink_scale = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<int>("shrink_scale", "int", 0, "Image size will be shrinked by this factor. Must be a power of 2.", "", &VXSGBMConfig::shrink_scale)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<int>("shrink_scale", "int", 0, "Image size will be shrinked by this factor. Must be a power of 2.", "", &VXSGBMConfig::shrink_scale)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.correlation_window_size = 5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.correlation_window_size = 31;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.correlation_window_size = 5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<int>("correlation_window_size", "int", 0, "SAD correlation window width, pixels", "", &VXSGBMConfig::correlation_window_size)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<int>("correlation_window_size", "int", 0, "SAD correlation window width, pixels", "", &VXSGBMConfig::correlation_window_size)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.bt_clip_value = 15;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.bt_clip_value = 95;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.bt_clip_value = 31;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<int>("bt_clip_value", "int", 0, "Truncation value (must be odd) for pre-filtering algorithm. It first computes x-derivative at each pixel and clips its value to [-bt_clip_value, bt_clip_value] interval.", "", &VXSGBMConfig::bt_clip_value)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<int>("bt_clip_value", "int", 0, "Truncation value (must be odd) for pre-filtering algorithm. It first computes x-derivative at each pixel and clips its value to [-bt_clip_value, bt_clip_value] interval.", "", &VXSGBMConfig::bt_clip_value)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ct_win_size = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ct_win_size = 31;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ct_win_size = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<int>("ct_win_size", "int", 0, "Specifies the census transform window size", "", &VXSGBMConfig::ct_win_size)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<int>("ct_win_size", "int", 0, "Specifies the census transform window size", "", &VXSGBMConfig::ct_win_size)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.hc_win_size = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.hc_win_size = 31;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.hc_win_size = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<int>("hc_win_size", "int", 0, "Specifies the hamming cost window size", "", &VXSGBMConfig::hc_win_size)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<int>("hc_win_size", "int", 0, "Specifies the hamming cost window size", "", &VXSGBMConfig::hc_win_size)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.min_disparity = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.min_disparity = 256;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.min_disparity = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<int>("min_disparity", "int", 0, "Disparity to begin search at, pixels", "", &VXSGBMConfig::min_disparity)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<int>("min_disparity", "int", 0, "Disparity to begin search at, pixels", "", &VXSGBMConfig::min_disparity)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_disparity = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_disparity = 256;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_disparity = 64;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<int>("max_disparity", "int", 0, "Disparity to finish search at, pixels (Must be divisible by 4)", "", &VXSGBMConfig::max_disparity)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<int>("max_disparity", "int", 0, "Disparity to finish search at, pixels (Must be divisible by 4)", "", &VXSGBMConfig::max_disparity)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.SCANLINE_LEFT_RIGHT = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.SCANLINE_LEFT_RIGHT = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.SCANLINE_LEFT_RIGHT = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<bool>("SCANLINE_LEFT_RIGHT", "bool", 0, "Aggregate cost from left to right horizontally", "", &VXSGBMConfig::SCANLINE_LEFT_RIGHT)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<bool>("SCANLINE_LEFT_RIGHT", "bool", 0, "Aggregate cost from left to right horizontally", "", &VXSGBMConfig::SCANLINE_LEFT_RIGHT)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.SCANLINE_TOP_LEFT_BOTTOM_RIGHT = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.SCANLINE_TOP_LEFT_BOTTOM_RIGHT = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.SCANLINE_TOP_LEFT_BOTTOM_RIGHT = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<bool>("SCANLINE_TOP_LEFT_BOTTOM_RIGHT", "bool", 0, "Aggregate cost from left to right diagonally starting from the top", "", &VXSGBMConfig::SCANLINE_TOP_LEFT_BOTTOM_RIGHT)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<bool>("SCANLINE_TOP_LEFT_BOTTOM_RIGHT", "bool", 0, "Aggregate cost from left to right diagonally starting from the top", "", &VXSGBMConfig::SCANLINE_TOP_LEFT_BOTTOM_RIGHT)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.SCANLINE_TOP_BOTTOM = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.SCANLINE_TOP_BOTTOM = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.SCANLINE_TOP_BOTTOM = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<bool>("SCANLINE_TOP_BOTTOM", "bool", 0, "Aggregate cost from top to bottom vertically", "", &VXSGBMConfig::SCANLINE_TOP_BOTTOM)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<bool>("SCANLINE_TOP_BOTTOM", "bool", 0, "Aggregate cost from top to bottom vertically", "", &VXSGBMConfig::SCANLINE_TOP_BOTTOM)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.SCANLINE_TOP_RIGHT_BOTTOM_LEFT = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.SCANLINE_TOP_RIGHT_BOTTOM_LEFT = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.SCANLINE_TOP_RIGHT_BOTTOM_LEFT = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<bool>("SCANLINE_TOP_RIGHT_BOTTOM_LEFT", "bool", 0, "Aggregate cost from right to left diagonally starting from the top", "", &VXSGBMConfig::SCANLINE_TOP_RIGHT_BOTTOM_LEFT)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<bool>("SCANLINE_TOP_RIGHT_BOTTOM_LEFT", "bool", 0, "Aggregate cost from right to left diagonally starting from the top", "", &VXSGBMConfig::SCANLINE_TOP_RIGHT_BOTTOM_LEFT)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.SCANLINE_RIGHT_LEFT = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.SCANLINE_RIGHT_LEFT = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.SCANLINE_RIGHT_LEFT = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<bool>("SCANLINE_RIGHT_LEFT", "bool", 0, "Aggregate cost from right to left horizontally", "", &VXSGBMConfig::SCANLINE_RIGHT_LEFT)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<bool>("SCANLINE_RIGHT_LEFT", "bool", 0, "Aggregate cost from right to left horizontally", "", &VXSGBMConfig::SCANLINE_RIGHT_LEFT)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.SCANLINE_BOTTOM_RIGHT_TOP_LEFT = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.SCANLINE_BOTTOM_RIGHT_TOP_LEFT = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.SCANLINE_BOTTOM_RIGHT_TOP_LEFT = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<bool>("SCANLINE_BOTTOM_RIGHT_TOP_LEFT", "bool", 0, "Aggregate cost from right to left diagonally starting from the bottom", "", &VXSGBMConfig::SCANLINE_BOTTOM_RIGHT_TOP_LEFT)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<bool>("SCANLINE_BOTTOM_RIGHT_TOP_LEFT", "bool", 0, "Aggregate cost from right to left diagonally starting from the bottom", "", &VXSGBMConfig::SCANLINE_BOTTOM_RIGHT_TOP_LEFT)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.SCANLINE_BOTTOM_TOP = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.SCANLINE_BOTTOM_TOP = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.SCANLINE_BOTTOM_TOP = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<bool>("SCANLINE_BOTTOM_TOP", "bool", 0, "Aggregate cost from bottom to top vertically", "", &VXSGBMConfig::SCANLINE_BOTTOM_TOP)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<bool>("SCANLINE_BOTTOM_TOP", "bool", 0, "Aggregate cost from bottom to top vertically", "", &VXSGBMConfig::SCANLINE_BOTTOM_TOP)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.SCANLINE_BOTTOM_LEFT_TOP_RIGHT = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.SCANLINE_BOTTOM_LEFT_TOP_RIGHT = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.SCANLINE_BOTTOM_LEFT_TOP_RIGHT = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<bool>("SCANLINE_BOTTOM_LEFT_TOP_RIGHT", "bool", 0, "Aggregate cost from left to right diagonally starting from the bottom", "", &VXSGBMConfig::SCANLINE_BOTTOM_LEFT_TOP_RIGHT)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<bool>("SCANLINE_BOTTOM_LEFT_TOP_RIGHT", "bool", 0, "Aggregate cost from left to right diagonally starting from the bottom", "", &VXSGBMConfig::SCANLINE_BOTTOM_LEFT_TOP_RIGHT)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.path_type = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.path_type = 2;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.path_type = 2;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<int>("path_type", "int", 0, "Scan path type", "{'enum_description': 'Scan line directions used during cost aggregation step', 'enum': [{'srcline': 31, 'description': 'Aggregate path will be OR-ed from the selections above', 'srcfile': '/home/jetson/Self-Driving-Delivery-Robot/src/utils/gpu_stereo_image_proc/cfg/VXSGBM.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'Individual'}, {'srcline': 32, 'description': 'Aggregate cost from four directions forming a cross', 'srcfile': '/home/jetson/Self-Driving-Delivery-Robot/src/utils/gpu_stereo_image_proc/cfg/VXSGBM.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'SCANLINE_CROSS'}, {'srcline': 33, 'description': 'Aggregate cost over all scan lines', 'srcfile': '/home/jetson/Self-Driving-Delivery-Robot/src/utils/gpu_stereo_image_proc/cfg/VXSGBM.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'SCANLINE_ALL'}]}", &VXSGBMConfig::path_type)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<int>("path_type", "int", 0, "Scan path type", "{'enum_description': 'Scan line directions used during cost aggregation step', 'enum': [{'srcline': 31, 'description': 'Aggregate path will be OR-ed from the selections above', 'srcfile': '/home/jetson/Self-Driving-Delivery-Robot/src/utils/gpu_stereo_image_proc/cfg/VXSGBM.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'Individual'}, {'srcline': 32, 'description': 'Aggregate cost from four directions forming a cross', 'srcfile': '/home/jetson/Self-Driving-Delivery-Robot/src/utils/gpu_stereo_image_proc/cfg/VXSGBM.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'SCANLINE_CROSS'}, {'srcline': 33, 'description': 'Aggregate cost over all scan lines', 'srcfile': '/home/jetson/Self-Driving-Delivery-Robot/src/utils/gpu_stereo_image_proc/cfg/VXSGBM.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'SCANLINE_ALL'}]}", &VXSGBMConfig::path_type)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.FILTER_TOP_AREA = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.FILTER_TOP_AREA = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.FILTER_TOP_AREA = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<bool>("FILTER_TOP_AREA", "bool", 0, "Filter cost at top image area with low gradients.", "", &VXSGBMConfig::FILTER_TOP_AREA)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<bool>("FILTER_TOP_AREA", "bool", 0, "Filter cost at top image area with low gradients.", "", &VXSGBMConfig::FILTER_TOP_AREA)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.PYRAMIDAL_STEREO = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.PYRAMIDAL_STEREO = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.PYRAMIDAL_STEREO = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<bool>("PYRAMIDAL_STEREO", "bool", 0, "Use pyramidal scheme: lower resolution imagery for nearby objects and the full resolution for far-away objects.", "", &VXSGBMConfig::PYRAMIDAL_STEREO)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<bool>("PYRAMIDAL_STEREO", "bool", 0, "Use pyramidal scheme: lower resolution imagery for nearby objects and the full resolution for far-away objects.", "", &VXSGBMConfig::PYRAMIDAL_STEREO)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.uniqueness_ratio = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.uniqueness_ratio = 100.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.uniqueness_ratio = 15.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<double>("uniqueness_ratio", "double", 0, "Filter out if best match does not sufficiently exceed the next-best match", "", &VXSGBMConfig::uniqueness_ratio)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<double>("uniqueness_ratio", "double", 0, "Filter out if best match does not sufficiently exceed the next-best match", "", &VXSGBMConfig::uniqueness_ratio)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.P1 = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.P1 = 256.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.P1 = 8.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<double>("P1", "double", 0, "Smoothness penalty", "", &VXSGBMConfig::P1)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<double>("P1", "double", 0, "Smoothness penalty", "", &VXSGBMConfig::P1)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.P2 = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.P2 = 256.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.P2 = 109.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<double>("P2", "double", 0, "Discontiguous pennalty", "", &VXSGBMConfig::P2)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<double>("P2", "double", 0, "Discontiguous pennalty", "", &VXSGBMConfig::P2)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.disp12MaxDiff = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.disp12MaxDiff = 32000;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.disp12MaxDiff = 320;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<int>("disp12MaxDiff", "int", 0, "Maximum allowed difference (in integer pixel units) in the left-right disparity check, only available in SGBM", "", &VXSGBMConfig::disp12MaxDiff)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VXSGBMConfig::AbstractParamDescriptionConstPtr(new VXSGBMConfig::ParamDescription<int>("disp12MaxDiff", "int", 0, "Maximum allowed difference (in integer pixel units) in the left-right disparity check, only available in SGBM", "", &VXSGBMConfig::disp12MaxDiff)));
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(VXSGBMConfig::AbstractGroupDescriptionConstPtr(new VXSGBMConfig::GroupDescription<VXSGBMConfig::DEFAULT, VXSGBMConfig>(Default)));
//#line 366 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<VXSGBMConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<VXSGBMConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<VXSGBMConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    VXSGBMConfig __max__;
    VXSGBMConfig __min__;
    VXSGBMConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const VXSGBMConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static VXSGBMConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &VXSGBMConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const VXSGBMConfig &VXSGBMConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const VXSGBMConfig &VXSGBMConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const VXSGBMConfig &VXSGBMConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<VXSGBMConfig::AbstractParamDescriptionConstPtr> &VXSGBMConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<VXSGBMConfig::AbstractGroupDescriptionConstPtr> &VXSGBMConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const VXSGBMConfigStatics *VXSGBMConfig::__get_statics__()
  {
    const static VXSGBMConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = VXSGBMConfigStatics::get_instance();

    return statics;
  }

//#line 31 "/home/jetson/Self-Driving-Delivery-Robot/src/utils/gpu_stereo_image_proc/cfg/VXSGBM.cfg"
      const int VXSGBM_Individual = 0;
//#line 32 "/home/jetson/Self-Driving-Delivery-Robot/src/utils/gpu_stereo_image_proc/cfg/VXSGBM.cfg"
      const int VXSGBM_SCANLINE_CROSS = 1;
//#line 33 "/home/jetson/Self-Driving-Delivery-Robot/src/utils/gpu_stereo_image_proc/cfg/VXSGBM.cfg"
      const int VXSGBM_SCANLINE_ALL = 2;
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __VXSGBMRECONFIGURATOR_H__
