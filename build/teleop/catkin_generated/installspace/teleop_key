#!/usr/bin/env python2

import rospy
from geometry_msgs.msg import Twist
import sys, select, os
if os.name == 'nt':
  import msvcrt, time
else:
  import tty, termios

MAX_LIN_VEL = 200.0
MIN_LIN_VEL = -200.0
MAX_ANG_VEL = 30.0
MIN_ANG_VEL = -30.0

LIN_VEL_STEP_SIZE = 1.0
ANG_VEL_STEP_SIZE = 1.0

msg = """
Control Your Device!
---------------------------
Moving around:
        w
   a    s    d
        
w/s : increase/decrease linear velocity (-200.0 ~ 200.0)
a/d : increase/decrease angular velocity (-30.0 ~ 30.0)

space key, x : force stop

CTRL-C to quit
"""

# Check the Communication Keyboard
def getKey():
    if os.name == 'nt':
        timeout = 0.1
        startTime = time.time()
        while(1):
            if msvcrt.kbhit():
                if sys.version_info[0] >= 3:
                    return msvcrt.getch().decode()
                else:
                    return msvcrt.getch()
            elif time.time() - startTime > timeout:
                return ''

    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key

# Check the limit linear
def checkMaxLinear(linear_vel):
    if linear_vel >= MAX_LIN_VEL:
	return MAX_LIN_VEL
    elif linear_vel <= MIN_LIN_VEL:
	return MIN_LIN_VEL
    else:
	return linear_vel

# Check the limit angular
def checkMaxAngular(angular_vel):
    if angular_vel >= MAX_ANG_VEL:
	return MAX_ANG_VEL
    elif angular_vel <= MIN_ANG_VEL:
	return MIN_ANG_VEL
    else:
	return angular_vel


def printVel(linear_vel, angular_vel):
    print(("[INFO]linear_vel:{} angular_vel:{}").format(linear_vel, angular_vel))

if __name__=="__main__":
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('teleop')
    pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)

    linear_vel = 0.0
    angular_vel = 0.0    

    try:
        print(msg)
        while not rospy.is_shutdown():
            key = getKey()
            if key == 'w' :
                linear_vel = linear_vel + LIN_VEL_STEP_SIZE
		linear_vel = checkMaxLinear(linear_vel)
		printVel(linear_vel, angular_vel)
            elif key == 's' :
		linear_vel = linear_vel - LIN_VEL_STEP_SIZE
		linear_vel = checkMaxLinear(linear_vel)
		printVel(linear_vel, angular_vel)
            elif key == 'a' :
		angular_vel = angular_vel - ANG_VEL_STEP_SIZE
		angular_vel = checkMaxAngular(angular_vel)
		printVel(linear_vel, angular_vel)
            elif key == 'd' :
		angular_vel = angular_vel + ANG_VEL_STEP_SIZE
		angular_vel = checkMaxAngular(angular_vel)
		printVel(linear_vel, angular_vel)
            elif key == ' ' or key == 'x' :
		linear_vel = 0.0
		angular_vel = 0.0
		printVel(linear_vel, angular_vel)
            else:
                if (key == '\x03'):
                    break

            twist = Twist()

	    twist.linear.x = linear_vel
	    twist.linear.y = 0.0
	    twist.linear.z = 0.0
	    
            twist.angular.x = angular_vel
            twist.angular.y = 0.0
            twist.angular.z = 0.0

            pub.publish(twist)

    except Exception as e:
        print(e)
    finally:
        twist = Twist()
        twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
        twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0
        pub.publish(twist)

    if os.name != 'nt':
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
